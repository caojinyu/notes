如果只是把trait理解为接口是错误的。
因为Send和Sync根本没有方法。

那么什么是trait呢？说白了，trait就是让我们的开发库的
人员有了一些权利，可以控制别人调用我的函数的时候，满足
我的要求，这个要求只限制在词法分析，编译层面，不满足，编译
通不过。

手册里面说实现了Send就可以转移所有权。屁话，有了move||{}
照样转移了所有权，要Send干嘛。实现了Sync可以发送&T，多线
线程之间共享引用。屁话，没有Sync，我照样可以发送&T啊。

大家都像我一样遇到过这样的疑惑吧。  move所有权和&T其实语法
层面的东西，说白了就是代码真实的完成的动作。
而Send和Sync是Rust给我们的一些权利，让我们的函数限定一下调用
者，满足Send才可以移动所有权，满足了Sync才可以发送&T。这只是
限定在了编译层面。Rust没有什么神秘的。

那是不是我自己定义一个triat，也可以达到这样的效果呢？

别忘记了Send和Sync是编译器照顾的类型，人家会自动推导的。
你自己定义的trait不会自动推导的。
