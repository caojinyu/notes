Rust中错误处理，如果没有很好的统一的工程化的命名，是比较混乱的，采取的方式如下：

1、每一个crate都要有一个统一的错误处理enum结构，命名的方式是crate名+Error。
   例如 有一个helloword的crate，那么错误的命名为HelloWorldError。

2、哪些错误要进入我定义的错误中呢？
	我定义的crate，当然要紧盯自己的逻辑实现，自己这一层的逻辑错误要进入HelloWorldError，
	其他依赖的crate传递上来的错误，统一的进入Other(String).

3、错误处理，颗粒度不要太细，避免过度的防御编程。

对于Rust的某一项技术的支持，为什么会迟迟不到位？
因为就是害怕有些人会过度的使用，过度的使用了From，忽略了map_err转换，好多人忽略
了性能这个东东。像别的语言，一般一个实现只有一种方法，rust实现的方法多了，难免
会导致一些人在某一方面的过度发挥，所以，麻烦点是有好处的。

Result<>的and_then（）方法，使用起来没有？好用，因为每次在and_then()之前都要map_err()一下，
切换一下返回的错误类型。总是感觉？符号的出现，就是为了替换这个and_then()的。后来我才发现，并不是
每一个错误都是能用？进行转换的，因为我们总不能在写项目之前，把所有的错误都From一遍吧，所以map_err
的作用还是很明显的。所以现在感觉？是给写应用的使用的，写库的还是使用map_err多些。

Option<>的and_then（）应该多使用。至于后续会不会出现？的错误，拭目以待。
