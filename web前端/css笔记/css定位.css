css为什么需要定位？
	1：某个元素可以自动的在一个盒子内移动位置，并且可以压住其他盒子。
	2：当我们在滚动窗口的时候，盒子是固定在屏幕的某个位置的。
以上的情况下，我们需要定位来实现。

浮动：可以让多个块级的盒子一行没有缝隙排列显示，经常用于横向排列盒子。
定位：可以让盒子自由的在某个盒子内移动位置或固定屏幕中某个位置，并且可以压住		其他盒子。

定位 = 定位模式 + 边偏移
1: 定位模式
	position: static | relative | absolute | fixed;
2: 边偏移：
	有四个属性，top、bottom、left、right。
	top: 80px;
	bottom:80px;
	left: 80px;
	right:80px;
定位模式：
	1：static
		position:static;就是无定位的意思，按照标准流摆放位置的。
		在布局中很少使用的。
	2：relative 相对定位。元素在移动位置的时候，是相对于它原来的位置来说的。自恋型的定位。
		position:relative;
		相对定位的特点：（务必记住）
		（1）它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）
		（2）原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（不脱标的，继续保持原来的位置，重点）

	3：absolute 绝对定位：
		相对于它的祖先元素来说的。（拼爹型）
		position: absolute;
		务必记住：
			（1）：如果没有祖先元素或者祖先元素没有定位呢，则以浏览器为准定位。（Document文档），如果这个盒子有父盒子，但是这个父盒子没有定位，还是以浏览器进行对齐的。
			（2）：如果父亲有定位的话（相对、绝对、固定），子盒子就会以最近一级带有定位的祖先元素为参照点移动位置。
			（3）：决定定位脱离原来的标准流，不再占有原来的位置，和相对定位不同。（这一点非常重要）
			使用场景分析：
				子绝父相的由来：
					子级是绝对定位，父级要用相对定位。
					（1）：子级绝对定位，不会占用原来位置，可以放在盒子里面的任何一个地方，不会影响其他的兄弟盒子。
					（2）：父亲要添加相对定位，占有位置的。保持了布局一致性。
	4：fixed 固定定位
		固定定位元素是固定于浏览器可视区的位置。主要场景：可以在浏览器页面滚动时，元素的位置不会改变。
		务必记住：
			（1）：以浏览器的可视窗口（改变浏览器的窗口大小，改变后的就是当前的可视窗口）为参照点移动元素。
			（2）：和父元素没有任何的关系
			（3）：不随滚动条滚动。
			（4）：固定定位不占有原先的位置。固定定位也是脱离标准流的，其实固定定位可以看做是一种特殊的绝对定位。
		
		技巧：固定定位怎样在版心的右侧位置？
			小算法：先计算出可视区的水平50%，固定好之后，之后然后再添加margin-left版心宽度的50%。
			注意必须先让固定显示的盒子在可视区显示出来才能设置fixed，不然由于要固定的盒子不在可视区显示，你设置了fixed之后，这个盒子就会消失了。
	5：sticky（了解）粘性定位
		可以被认为是相对定位和固定定位的混合。
		position: sticky;top:10px;
		1：以浏览器的可视窗口为参照点移动元素（固定定位的特点）
		2：粘性定位是占有原先的位置的。（相对定位的特点）
		3：必须添加top、left、right、bottom其中一个才会有效果。
		兼容性不好，大部分的效果是通过js实现的。
		
定位叠放顺序 z-index
	在使用定位布局时，可能会出现盒子重叠的情况，此时可以使用z-index来控制盒子的前后次序：
		z-index: 1;
	数值可以是正整数，负整数，0.默认是auto，数值越大，盒子越靠上。
	后面不能添加单位。
	只有定位的盒子才有z-index的属性。
	
定位的拓展：
	1：如何让一个绝对定位的盒子居中。通过算法：
		left：50%； margin-left：负的自己盒子的一半
		top:50% margin-top:负的自己盒子高度的一半.
	2：如果一个盒子有了定位，那么可以直接设置高度宽度，不再需要设置display了。
	3：如果块状元素设置了定位，不给大小，默认的是内容的大小。
	4：脱标的盒子不再发生外边距合并和塌陷了。
	5：绝对定位（固定定位）会完全压住盒子，浮动元素不用，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）。但是绝对定位（固定定位）会压住下面标准流所有的内容。浮动最早产生的目的是做文字环绕效果的。
	如果一个盒子既有左侧定位，右又右侧定位，执行left，同理优先执行top。
	
	
		
		
		
		
		
		